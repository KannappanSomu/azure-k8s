name: Master Branch
on:
  push:
    branches:
      - 'main'

jobs:
  pre-check-infrastructure:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment: "Terraform-Plan"

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: "./src/linux-agent/self-managed-subscription/"
      run: terraform init -backend-config="storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ secrets.BACKEND_ST_CONTAINER_NAME }}" -backend-config="access_key=${{ secrets.BACKEND_ST_CONTAINER_ACCESS_KEY }}" -backend-config="key=${{ secrets.BACKEND_TF_STATE_FILE_NAME }}"

    # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: "."
      run: terraform plan -out out.plan -no-color -var 'client_secret=${{ secrets.AZURE_AD_CLIENT_SECRET }}' 
  
  deploy-infrastructure:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment: "Terraform-Apply"
    needs: "pre-check-infrastructure"

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
   
   # On push to main, build or change infrastructure according to Terraform configuration files
   # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: "."
        run: terraform init -backend-config="storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ secrets.BACKEND_ST_CONTAINER_NAME }}" -backend-config="access_key=${{ secrets.BACKEND_ST_CONTAINER_ACCESS_KEY }}" -backend-config="key=${{ secrets.BACKEND_TF_STATE_FILE_NAME }}"
      
      - name: Terraform Apply
        run: terraform -chdir="." apply -auto-approve -var 'client_secret=${{ secrets.AZURE_AD_CLIENT_SECRET }}'
